type: edu
files:
  - name: src/search/Main.java
    visible: true
    text: |
      package search;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/SearchEngineTests.java
    visible: false
    text: |
      public class SearchEngineTests {
          public static final String NAMES = "Kristofer Galley\n" +
              "Fernando Marbury fernando_marbury@gmail.com\n" +
              "Kristyn Nix nix-kris@gmail.com\n" +
              "Regenia Enderle\n" +
              "Malena Gray\n" +
              "Colette Mattei\n" +
              "Wendolyn Mcphillips\n" +
              "Jim Gray\n" +
              "Coreen Beckham\n" +
              "Bob Yeh bobyeah@gmail.com\n" +
              "Shannan Bob stropeshah@gmail.com\n" +
              "Yer Fillion\n" +
              "Margene Resendez marres@gmail.com\n" +
              "Blossom Ambler\n" +
              "Teri Ledet teri_ledet@gmail.com\n" +
              "Dana Baron baron@gmail.com\n" +
              "Abram Goldsberry\n" +
              "Yer Leopold\n" +
              "Stefania Trunzo\n" +
              "Alexis Leopold\n" +
              "Carlene Bob\n" +
              "Oliver Dacruz\n" +
              "Jonie Richter\n" +
              "Pasquale Gallien gallien@evilcorp.com\n" +
              "Verdie Gentle\n" +
              "Gerardo Strouth gallien@evilcorp.com\n" +
              "Agripina Bob\n" +
              "Latricia Niebuhr\n" +
              "Malena Schommer\n" +
              "Drema Leopold\n" +
              "Heide Payeur\n" +
              "Ranae Digiovanni\n" +
              "Simona Pereira\n" +
              "Nick Digiovanni\n" +
              "Angelita Wigington gallien@evilcorp.com\n" +
              "Elin Gray\n" +
              "Dwain Trunzo\n" +
              "Boris Beiler\n" +
              "Remi Malek fsociefy@gmail.com\n" +
              "Demetria Hostetler gallien@evilcorp.com\n" +
              "Nydia Mcduffie\n" +
              "Florencio Defibaugh\n" +
              "Warner Giblin\n" +
              "Bob Mans\n" +
              "Shu Gray\n" +
              "Kaycee Gray\n" +
              "Victorina Froehlich victory@gmail.com\n" +
              "Roseanne Gray\n" +
              "Erica Radford hisam@gmail.com\n" +
              "Elyse Pauling";
      }
    learner_created: false
  - name: test/SimpleSearchEngineTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.*;
      
      class TestClue {
          String input;
      
          TestClue(String input) {
              this.input = input;
          }
      }
      
      public class SimpleSearchEngineTest extends StageTest<TestClue> {
      
          @Override
          public List<TestCase<TestClue>> generate() {
              return Arrays.asList(
                  new TestCase<TestClue>().setAttach(
                      new TestClue("1\n" +
                      "ANY\n" +
                      "bob gallien@evilcorp.com\n" +
                      "2\n" +
                      "1\n" +
                      "NONE\n" +
                      "bob gallien@evilcorp.com\n" +
                      "0")).setInput("1\n" +
                      "ANY\n" +
                      "bob gallien@evilcorp.com\n" +
                      "2\n" +
                      "1\n" +
                      "NONE\n" +
                      "bob gallien@evilcorp.com\n" +
                      "0")
                      .addArguments("--data", "names.txt")
                      .addFile("names.txt", SearchEngineTests.NAMES),
      
      
                  new TestCase<TestClue>().setAttach(new TestClue("2\n" +
                      "1\n" +
                      "ALL\n" +
                      "this text never gonna be matched\n" +
                      "2\n" +
                      "0")).setInput("2\n" +
                      "1\n" +
                      "ALL\n" +
                      "this text never gonna be matched\n" +
                      "2\n" +
                      "0")
                      .addArguments("--data", "names.txt")
                      .addFile("names.txt", SearchEngineTests.NAMES)
              );
          }
      
          @Override
          public CheckResult check(String reply, TestClue clue) {
              String cR = "\n";
              List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
              String[] inputLines = clue.input.split(cR);
              String[] reference;
      
              reference = SearchEngineTests.NAMES.split("\n");
      
              //clear the list of unnecessary lines, if any
              List<String> cleanedOutput = new ArrayList<String>();
              for (int i = 0; i < outputLines.size(); i++) {
                  if (containsItemFromList(outputLines.get(i), reference)) {
                      cleanedOutput.add(outputLines.get(i).toLowerCase());
                  }
              }
      
              int currentInputLine = 0;
              int currentOutputLine = 0;
      
              int actionType = -1;
      
              while (actionType != 0) {
                  try {
                      actionType = Integer.parseInt(inputLines[currentInputLine]);
                  } catch (NumberFormatException e) {
                      return new CheckResult(false,
                          "The number of menu item must be number!");
                  }
      
                  switch (actionType) {
                      case 1:
                          currentInputLine++;
      
                          List<Integer> result = new ArrayList<>();
      
                          List<String> intendedResult = new ArrayList<>();
      
                          while (true) {
                              String mode = inputLines[currentInputLine].trim().toLowerCase();
                              currentInputLine++;
      
                              String toSearch = "";
      
                              if (mode.equalsIgnoreCase("all")) {
                                  toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                  currentInputLine++;
                                  String[] allChecks = toSearch.split(" ");
      
                                  for (String s : reference) {
                                      s = s.toLowerCase();
      
                                      boolean isPassedChecks = true;
      
                                      for (String currCheck : allChecks) {
                                          if (!(s.contains(" " + currCheck + " ")
                                              || s.startsWith(currCheck + " ")
                                              || s.endsWith(" " + currCheck))) {
      
                                              isPassedChecks = false;
                                              break;
                                          }
                                      }
      
                                      if (isPassedChecks) {
                                          intendedResult.add(s);
                                      }
                                  }
                                  break;
                              } else if (mode.equalsIgnoreCase("any")) {
                                  toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                  currentInputLine++;
                                  String[] allChecks = toSearch.split(" ");
      
                                  for (String s : reference) {
                                      s = s.toLowerCase();
      
                                      boolean isPassedChecks = false;
      
                                      for (String currCheck : allChecks) {
                                          if (s.contains(" " + currCheck + " ")
                                              || s.startsWith(currCheck + " ")
                                              || s.endsWith(" " + currCheck)) {
      
                                              isPassedChecks = true;
                                              break;
                                          }
                                      }
      
                                      if (isPassedChecks) {
                                          intendedResult.add(s);
                                      }
                                  }
                                  break;
                              } else if (mode.equalsIgnoreCase("none")) {
                                  toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                  currentInputLine++;
                                  String[] allChecks = toSearch.split(" ");
      
                                  for (String s : reference) {
                                      s = s.toLowerCase();
      
                                      boolean isPassedChecks = true;
      
                                      for (String currCheck : allChecks) {
                                          if (s.contains(" " + currCheck + " ")
                                              || s.startsWith(currCheck + " ")
                                              || s.endsWith(" " + currCheck)) {
      
                                              isPassedChecks = false;
                                              break;
                                          }
                                      }
      
                                      if (isPassedChecks) {
                                          intendedResult.add(s);
                                      }
                                  }
                                  break;
                              }
                          }
      
                          String[] userResult = new String[intendedResult.size()];
                          for (int i = 0; i < intendedResult.size(); i++) {
                              try {
                                  userResult[i] = cleanedOutput.get(currentOutputLine++);
                              } catch (IndexOutOfBoundsException e) {
                                  return new CheckResult(false,
                                      "Seems like you output less than expected. " +
                                          "Either you've lost someone in the printing of all " +
                                          "people, or you haven't printed all the necessary " +
                                          "people in the search.");
                              }
                          }
      
                          String[] correctOutput = intendedResult.toArray(String[]::new);
      
                          Arrays.sort(correctOutput);
                          Arrays.sort(userResult);
      
                          if (!Arrays.equals(correctOutput, userResult)) {
                              return new CheckResult(false,
                                  "Search result is not equal " +
                                      "to the expected search");
                          }
                          break;
                      case 2:
                          currentInputLine++;
      
                          List<String> intendedResultAll = new ArrayList<>();
      
                          for (String s : reference) {
                              s = s.toLowerCase();
                              intendedResultAll.add(s);
                          }
      
                          String[] userResultAll = new String[intendedResultAll.size()];
                          for (int i = 0; i < intendedResultAll.size(); i++) {
                              try {
                                  userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                              } catch (IndexOutOfBoundsException e) {
                                  return new CheckResult(false,
                                      "Seems like you output less than expected. " +
                                          "Either you've lost someone in the printing of all " +
                                          "people, or you haven't printed all the necessary " +
                                          "people in the search.");
                              }
                          }
      
                          String[] correctOutputAll = intendedResultAll.toArray(String[]::new);
      
                          Arrays.sort(correctOutputAll);
                          Arrays.sort(userResultAll);
      
                          if (!Arrays.equals(correctOutputAll, userResultAll)) {
                              return new CheckResult(false,
                                  "Looks like you're printing " +
                                      "unknown people when you enter option 2.");
                          }
                          break;
                      case 0:
                          return CheckResult.correct();
                      default:
                          currentInputLine++;
                          break;
                  }
              }
      
              return CheckResult.correct();
          }
      
          private static boolean containsItemFromList(String inputStr, String[] items) {
              return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
          }
      }
    learner_created: false
  - name: src/search/PeopleList.java
    visible: true
    text: |
      package search;
      
      import java.io.IOException;
      import java.nio.file.Files;
      import java.nio.file.Path;
      import java.nio.file.Paths;
      import java.util.*;
      
      public class PeopleList {
          static void printPeople(String[] data){
              System.out.println("\n=== List of people ===");
              for (int i = 0; i < data.length; i++) {
                  System.out.println(data[i]);
              }
          }
          public static long textSize(String[] args){
              Path path = Paths.get(args[1]);
              long textLength = 0L;
              try{
                  textLength = Files.lines(path).count();
              } catch (IOException e) {
                  e.printStackTrace();
              }
              return textLength;
          }
          static String[] dataArray (Scanner scan, int textLen){
              String[] data1 = new String[textLen];
              while (scan.hasNextLine()) {
                  for (int i = 0 ; i < textLen; i++){
                      data1[i] = scan.nextLine();
                  }
              }
              return data1;
          }
          static List<String> dataListM (Scanner scann, int textLen){
              List<String> dataList1 = new ArrayList<>();
      
              for ( int i = 0; i < textLen; i++){
                  dataList1.add(scann.nextLine());
              }
              return dataList1;
          }
          static Map dataMap (List<String> dataList){
      
              Map<String, List<Integer>> map1 = new HashMap<>();
      
              for (int i = 0 ; i < dataList.size(); i++ ) {
                  String[] names = dataList.get(i).split(" ");
                  for (int j = 0 ; j < names.length; j++) {
                      if (map1.containsKey(names[j])) {
                          map1.get(names[j]).add(i);
                      } else {
                          List<Integer> index = new ArrayList<>();
                          index.add(i);
                          map1.put(names[j], index);
                      }
                  }
              }
              return map1;
          }
      }
    learner_created: true
  - name: src/search/SearchEngine.java
    visible: true
    text: |
      package search;
      
      import java.util.List;
      import java.util.Map;
      import java.util.Scanner;
      
      public class SearchEngine {
          static void findPerson(String[] data, boolean foundSearch, Map<String, List<Integer>> map, List<String> dataList, Scanner scanner){
              System.out.println("Select a matching strategy: ALL, ANY, NONE");
              String strategy = scanner.nextLine();
              System.out.println("Enter a name or email  to search all suitable people:");
              String dataPeople = scanner.nextLine();
              foundSearch = false;
      
              for (String ele : map.keySet()) {
                  if (ele.toUpperCase().equals(dataPeople.toUpperCase())) {
                      for (int i = 0; i < map.get(ele).size(); i++) {
                          System.out.println(dataList.get(map.get(ele).get(i)));
                          foundSearch = true;
                      }
                  }
              }
              if (!foundSearch) {
                  System.out.println("No matching people found.");
              }
          }
          static void allStrategy (String dataPeople, Map<String, List<Integer>> map, List<String> dataList ){
      
          }
          static void anyStrategy (String dataPeople, Map<String, List<Integer>> map, List<String> dataList ){
      
          }
          static void noneStrategy (String dataPeople, Map<String, List<Integer>> map, List<String> dataList ){
      
          }
      }
    learner_created: true
  - name: src/search/Menu.java
    visible: true
    text: |
      package search;
      
      import java.util.List;
      import java.util.Map;
      import java.util.Scanner;
      
      public class Menu {
          static void printMenu(){
              System.out.println("\n=== Menu === \n"
                      + "1. Find a person \n"
                      + "2. Print all people \n"
                      + "0. Exit");
          }
          static void menuSelection(String[] data, Map<String, List<Integer>> map, List<String> dataList){
              boolean foundSearch = false;
              boolean exitMenu = false;
              String selectMenu;
      
              while(!exitMenu){
                  Menu.printMenu();
                  Scanner scanner = new Scanner(System.in);
                  selectMenu = scanner.nextLine();
                  switch (selectMenu){
                      case "1":
                          SearchEngine.findPerson(data, foundSearch, map, dataList, scanner);
                          break;
                      case "2":
                          PeopleList.printPeople(data);
                          break;
                      case "0":
                          System.out.println("Bye!");
                          exitMenu = true;
                          break;
                      default:
                          System.out.println("Incorrect option! Try again.");
                  }
              }
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5501#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 24 Oct 2023 16:03:41 UTC"
record: -1
