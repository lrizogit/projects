type: edu
files:
  - name: src/tictactoe/Main.java
    visible: true
    text: |
      package tictactoe;
      
      public class Main {
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/TicTacToeTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.List;
      
      
      public class TicTacToeTest extends StageTest<String> {
      
          int[] easyAiMoves = new int[9];
      
          @DynamicTest(order = 0)
          CheckResult testBadParameters() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start");
              if (!output.toLowerCase().contains("bad parameters")) {
                  return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
              }
      
              output = program.execute("start easy");
              if (!output.toLowerCase().contains("bad parameters")) {
                  return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
              }
      
              program.execute("exit");
      
              if (!program.isFinished()) {
                  return CheckResult.wrong("After entering 'exit' command you should stop the program!");
              }
      
              return CheckResult.correct();
          }
      
      
          @DynamicTest(order = 1)
          CheckResult testGridOutput() {
      
              TestedProgram program = new TestedProgram();
      
              program.start();
      
              String output = program.execute("start user easy");
      
              Grid printedGrid = Grid.fromOutput(output);
              Grid emptyGrid = Grid.fromLine("_________");
      
              if (!printedGrid.equals(emptyGrid)) {
                  return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                      "Correct empty grid:\n" + emptyGrid);
              }
      
              if (!output.toLowerCase().contains("enter the coordinates:")) {
                  return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
              }
      
              output = program.execute("2 2");
      
              Grid gridAfterMove = Grid.fromOutput(output);
              Grid correctGridAfterMove = Grid.fromLine("____X____");
      
              if (!gridAfterMove.equals(correctGridAfterMove)) {
                  return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                      "Your grid:\n" + gridAfterMove + "\n" +
                      "Correct grid:\n" + correctGridAfterMove);
              }
      
              if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                  return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
              }
      
              Grid gridAfterAiMove = Grid.fromOutput(output, 2);
      
              if (gridAfterAiMove.equals(gridAfterMove)) {
                  return CheckResult.wrong("After AI move grid wasn't changed!");
              }
      
              Grid gameGrid = gridAfterAiMove;
      
              while (true) {
                  if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                      switch (gameGrid.getGameState()) {
                          case X_WIN:
                              if (!output.contains("X wins")) {
                                  return CheckResult.wrong("You should print 'X wins' if X win the game");
                              }
                              break;
                          case O_WIN:
                              if (!output.contains("O wins")) {
                                  return CheckResult.wrong("You should print 'O wins' if O win the game");
                              }
                              break;
                          case DRAW:
                              if (!output.contains("Draw")) {
                                  return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                              }
                              break;
                      }
                      break;
                  }
                  Position nextMove = Minimax.getMove(gameGrid, CellState.X);
      
                  Grid tempGrid = gameGrid.copy();
                  tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);
      
                  output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
      
                  gameGrid = Grid.fromOutput(output);
      
                  if (!gameGrid.equals(tempGrid)) {
                      return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                          "Your gird\n" + gameGrid + "\n" +
                          "Correct grid\n" + tempGrid);
                  }
      
                  if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                      continue;
      
                  gameGrid = Grid.fromOutput(output, 2);
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 100, order = 2)
          CheckResult checkEasyAi() {
              TestedProgram program = new TestedProgram();
              program.start();
      
              program.execute("start user easy");
      
              String output = program.execute("2 2");
      
              Grid gridAfterAiMove = Grid.fromOutput(output, 2);
      
              CellState[][] array = gridAfterAiMove.getGrid();
      
              for (int i = 0; i < 9; i++) {
                  if (i == 4) {
                      continue;
                  }
                  if (array[i / 3][i % 3] == CellState.O) {
                      easyAiMoves[i]++;
                  }
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 3)
          CheckResult checkRandom() {
              double averageScore = 0;
      
              for (int i = 0; i < easyAiMoves.length; i++) {
                  averageScore += (i + 1) * easyAiMoves[i];
              }
      
              averageScore /= 8;
      
              double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;
      
              if (Math.abs(averageScore - expectedValue) > 20) {
                  return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
              }
      
              return CheckResult.correct();
          }
      
          boolean isEasyNotMovingLikeMedium = false;
      
          @DynamicTest(repeat = 30, order = 4)
          CheckResult checkEasyNotMovingLikeMedium() {
      
              if (isEasyNotMovingLikeMedium) {
                  return CheckResult.correct();
              }
      
              TestedProgram program = new TestedProgram();
              program.start();
              program.execute("start user easy");
      
              String output = program.execute("2 2");
      
              Grid gameGrid = Grid.fromOutput(output, 2);
      
              CellState[][] cellStates = gameGrid.getGrid();
      
              if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                  output = program.execute("1 1");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                      isEasyNotMovingLikeMedium = true;
                  }
              } else {
                  output = program.execute("1 3");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                      isEasyNotMovingLikeMedium = true;
                  }
              }
      
              program.stop();
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 5)
          CheckResult checkEasyNotMovingLikeMediumAfter() {
              if (!isEasyNotMovingLikeMedium) {
                  return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
              }
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 6)
          CheckResult checkEasyVsEasy() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start easy easy");
      
              List<Grid> gridList = Grid.allGridsFromOutput(output);
      
              Grid.checkGridSequence(gridList);
      
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 10, order = 7)
          CheckResult checkMediumAi() {
              TestedProgram program = new TestedProgram();
              program.start();
              program.execute("start user medium");
      
              String output = program.execute("2 2");
      
              Grid gameGrid = Grid.fromOutput(output, 2);
      
              CellState[][] cellStates = gameGrid.getGrid();
      
              if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                  output = program.execute("1 1");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                      return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                  }
              } else {
                  output = program.execute("1 3");
                  gameGrid = Grid.fromOutput(output, 2);
                  if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                      return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                  }
              }
              program.stop();
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 8, repeat = 5)
          CheckResult checkMediumVsMedium() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start medium medium");
      
              List<Grid> gridList = Grid.allGridsFromOutput(output);
      
              Grid.checkGridSequence(gridList);
      
              return CheckResult.correct();
          }
      
          boolean isMediumNotMovingLikeHard = false;
      
          @DynamicTest(repeat = 30, order = 9)
          CheckResult checkMediumNotMovingLikeHard() {
      
              if (isMediumNotMovingLikeHard) {
                  return CheckResult.correct();
              }
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              program.execute("start user medium");
      
              String output = program.execute("2 2");
      
              Grid userMoveGrid = Grid.fromOutput(output, 1);
              Grid mediumMoveGrid = Grid.fromOutput(output, 2);
      
              Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);
      
              List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);
      
              if (!minimaxCorrectPositions.contains(mediumMove)) {
                  isMediumNotMovingLikeHard = true;
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 10)
          CheckResult checkMediumNotMovingLikeHardAfter() {
              if (!isMediumNotMovingLikeHard) {
                  return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
              }
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 11)
          CheckResult checkHardAi() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start user hard");
              Grid grid = Grid.fromOutput(output);
              Position nextMove = Minimax.getMove(grid, CellState.X);
              output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
      
              while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                  Grid gridAfterUserMove = Grid.fromOutput(output);
                  Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                  Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);
      
                  List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                  if (!correctMinimaxMovePositions.contains(aiMove)) {
                      return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                  }
      
                  nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);
      
                  output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 5, order = 12)
          CheckResult checkHardVsHard() {
      
              TestedProgram program = new TestedProgram();
              program.start();
      
              String output = program.execute("start hard hard");
      
              if (!output.toLowerCase().contains("draw")) {
                  return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                      "Make sure your output contains 'Draw'.");
              }
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/tictactoe/Board.java
    visible: true
    text: |-
      package tictactoe;
      
      import java.util.Random;
      import java.util.Scanner;
      
      public class Board {
          public static void printGraph(char[][] tic) {
              System.out.println("---------");
              System.out.println("| " + tic[0][0] + " " + tic[0][1] + " " + tic[0][2] + " |");
              System.out.println("| " + tic[1][0] + " " + tic[1][1] + " " + tic[1][2] + " |");
              System.out.println("| " + tic[2][0] + " " + tic[2][1] + " " + tic[2][2] + " |");
              System.out.println("---------");
          }
          public static boolean statusCheck(char[][] tic, char d, char tm) {
              if (anyWinner(tic)) {
                  System.out.println(tm + " wins");
                  return true;
              } else if (!(tic[0][0] == ' ' || tic[1][0] == ' ' || tic[2][0] == ' ' ||
                      tic[0][1] == ' ' || tic[1][1] == ' ' || tic[2][1] == ' ' ||
                      tic[0][2] == ' ' || tic[1][2] == ' ' || tic[2][2] == ' ')) {
                  System.out.println("Draw");
                  return true;
              }
              return false;
          }
          public static boolean anyWinner(char[][] tic) {
              if ((tic[0][0] == tic[0][1] && tic[0][0] == tic[0][2] && tic[0][0] != ' ' ||
                      tic[0][0] == tic[1][1] && tic[0][0] == tic[2][2] && tic[0][0] != ' ' ||
                      tic[0][0] == tic[1][0] && tic[0][0] == tic[2][0] && tic[0][0] != ' ' ||
                      tic[1][0] == tic[1][1] && tic[1][0] == tic[1][2] && tic[1][0] != ' ' ||
                      tic[2][0] == tic[2][1] && tic[2][0] == tic[2][2] && tic[2][0] != ' ' ||
                      tic[0][1] == tic[1][1] && tic[0][1] == tic[2][1] && tic[0][1] != ' ' ||
                      tic[0][2] == tic[1][2] && tic[0][2] == tic[2][2] && tic[0][2] != ' ' ||
                      tic[2][0] == tic[1][1] && tic[2][0] == tic[0][2] && tic[2][0] != ' ')) {
                  return true;
              }
              return false;
          }
          public static boolean anyWinnerMed(char[][] tic) {
              if ((tic[0][0] == tic[0][1] && tic[0][0] == tic[0][2] && tic[0][0] != ' ' ||
                      tic[0][0] == tic[1][1] && tic[0][0] == tic[2][2] && tic[0][0] != ' ' ||
                      tic[0][0] == tic[1][0] && tic[0][0] == tic[2][0] && tic[0][0] != ' ' ||
                      tic[1][0] == tic[1][1] && tic[1][0] == tic[1][2] && tic[1][0] != ' ' ||
                      tic[2][0] == tic[2][1] && tic[2][0] == tic[2][2] && tic[2][0] != ' ' ||
                      tic[0][1] == tic[1][1] && tic[0][1] == tic[2][1] && tic[0][1] != ' ' ||
                      tic[0][2] == tic[1][2] && tic[0][2] == tic[2][2] && tic[0][2] != ' ' ||
                      tic[2][0] == tic[1][1] && tic[2][0] == tic[0][2] && tic[2][0] != ' ')) {
                  return true;
              }
              return false;
          }
      }
    learner_created: true
  - name: src/tictactoe/Medium.java
    visible: true
    text: |
      package tictactoe;
      
      import java.util.Random;
      import java.util.Scanner;
      
      public class Medium implements Player{
      
          public void play(char[][] tic, boolean rightCoInt, int a, int b, char tm, Scanner scanner, Random random){
              char tmM = tm;
              boolean medright = false;
              outerloop:
              while(!medright) {
      
                  for (int i = 0; i < 3; i++) {
                      for (int j = 0; j < 3; j++) {
                          if (tic[i][j] == ' ') {
                              tic[i][j] = tmM;
                              if (Board.anyWinner(tic)) {
                                  tic[i][j] = tm;
                                  medright = true;
                                  break outerloop;
                              } else {
                                  tic[i][j] = ' ';
                              }
                          }
                      }
                  }
                  switch (tm){
                      case 'X':
                          tmM = 'O';
                          break;
                      case 'O':
                          tmM = 'X';
                          break;
                  }
                  for (int i = 0; i < 3; i++) {
                      for (int j = 0; j < 3; j++) {
                          if (tic[i][j] == ' ') {
                              tic[i][j] = tmM;
                              if (Board.anyWinner(tic)) {
                                  tic[i][j] = tm;
                                  medright = true;
                                  break outerloop;
                              } else {
                                  tic[i][j] = ' ';
                              }
                          }
                      }
                  }
                  a = random.nextInt(3);
                  b = random.nextInt(3);
                  while (tic[a][b] != ' ') {
                      a = random.nextInt(3);
                      b = random.nextInt(3);
                  }
                  tic[a][b] = tm;
                  medright = true;
              }
      
              System.out.println("Making move level \"medium\" ");
      
          }
      }
    learner_created: true
  - name: src/tictactoe/Player.java
    visible: true
    text: |-
      package tictactoe;
      
      import java.util.Scanner;
      import java.util.Random;
      
      public interface Player {
          void play(char[][] tic, boolean rightCoInt, int a, int b, char tm, Scanner scanner, Random random);
          }
    learner_created: true
  - name: src/tictactoe/Com.java
    visible: true
    text: |-
      package tictactoe;
      
      import java.util.Random;
      import java.util.Scanner;
      
      public class Com implements Player{
      
          public void play(char[][] tic, boolean rightCoInt, int a, int b, char tm, Scanner scanner, Random random){
              a = random.nextInt(3);
              b = random.nextInt(3);
              while (tic[a][b] != ' ') {
                  a = random.nextInt(3);
                  b = random.nextInt(3);
              }
              System.out.println("Making move level \"easy\" ");
              tic[a][b] = tm;
          }
          public static void randomCom(char[][] tic, int a, int b, Random random){
              a = random.nextInt(3);
              b = random.nextInt(3);
              while (tic[a][b] != ' ') {
                  a = random.nextInt(3);
                  b = random.nextInt(3);
              }
          }
      }
    learner_created: true
  - name: src/tictactoe/User.java
    visible: true
    text: |-
      package tictactoe;
      
      import java.util.Scanner;
      import java.util.Random;
      
      public class User implements Player{
      
          public void play(char[][] tic, boolean rightCoInt, int a, int b, char tm, Scanner scanner, Random random){
              while (!rightCoInt) {
      
                  System.out.print("Enter the coordinates: ");
                  // scanner.nextLine();
                  boolean isInt = scanner.hasNextInt();
                  //scanner.nextLine();
                  if (!isInt) {
                      System.out.println("You should enter numbers!");
                      scanner.next();
                      continue;
                  } else {
                      a = scanner.nextInt() - 1;
                  }
                  boolean isIntB = scanner.hasNextInt();
                  if (!isIntB) {
                      System.out.println("You should enter numbers!");
                      scanner.next();
                      continue;
                  } else {
                      b = scanner.nextInt() - 1;
                  }
                  if (a > 2 || b > 2 || a < 0 || b < 0) {
                      System.out.println("Coordinates should be from 1 to 3!");
                      scanner.nextLine();
                  } else if (tic[a][b] == 'X' || tic[a][b] == 'O') {
                      System.out.println("This cell is occupied! Choose another one!");
                      scanner.nextLine();
                  } else {
                      tic[a][b] = tm;
                      rightCoInt = true;
      
                  }
              }
      
          }
      }
    learner_created: true
  - name: src/tictactoe/Hard.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/7438#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 09 Oct 2023 22:19:32 UTC"
record: -1
